=head1 Managing the talk schedule with Act

=encoding utf8

Act automatically creates a schedule web page from the talks information.
The schedule is also made available in the ICal format.

=head1 GENERAL SCHEDULE TIPS

Once you have enough accepted talks, you can start working out
the talk schedule.

Here are a few general tips:

=over 4

=item *

Print the talk list, try to find a few general groups, and try to
group them in tracks. Ideally, someone interested in say, XML, or Security
should be able to follow all talks related to their pet subject
without changing rooms.

=item *

You should know your speakers or their subject enough to decide which
speakers/talks get the big room.

=item *

Leave 5 minutes between talks. It always takes the speakers some time
to set up their material. It also takes time to kick the previous
speaker out. C<;-)>

=item *

Count 1 minute between two lightning talks (you need time to swap speakers)
So, that's 10 five minutes lightning talks per hour (not 12).

This way, you'll also have room to accept an extra talk or two, in case
the process runs very smoothly (e.g. using a data switcher to let one
speaker prepare while the previous one is still talking).

=item *

Do not pit any talker against the lightning talks. The lightning talks
will win.

=back

Once you've worked out a rough draft of the schedule, you can start
using Act to edit the talks date, time and room. You can also change
the duration, but discuss it with the speaker first.

=head1 THE ACT SCHEDULE

=head2 How it looks

People with the C<orga> bit set can always see (and edit) the schedule. It
becomes public when the C<[talks]> item named C<show_schedule> is set to 1.

The first time you'll look at the schedule, it'll probably be empty:
all the talks that have no assigned room and date/time are in a list at
the top of the page.

Once you've assigned a room and a date/time to a talk/event, it will be
shown in the schedule. The system tries to show conflicting items (two talks
at the same time in the same place) in a nice way.

The HTML table uses as many styles as you have rooms, plus three. Imagine
you have three rooms, the table will use the following styles: C<header>,
C<out>, C<sidetrack>, C<venue>, C<r1>, C<r2>, C<r3> and C<r4>.
(If you have five rooms, a style C<r5> will automatically be used, and so on.)

You can either define those styles in your stylesheet, or simply load the
style located at F</css/schedule.css> with
C<E<lt>link rel="stylesheet" type="text/css" href="/css/schedule.css" /E<gt>>.
We'll add new colours when a conference has more than four rooms.

If you want to add some static information to the schedule
(for example sponsor information), create a new template in
F<actdocs/templates/talk/schedule>, based on the following:

    [% WRAPPER ui
       title = { en => 'Schedule', fr => 'Emploi du temps', it => 'Programma', pt => 'Programa', de => 'Programm', hu => 'Idõbeosztás'}
    %]
    
    <!-- The schedule table -->
    [% PROCESS core/talk/schedule %]
    
    [% END %]

=head2 How it works

Act can lay out the schedule when there are talks with a date and room
defined. It should gracefully show overlapping talks, so that you can detect
there is a problem.

Events are basically talks without a speaker. Only events can happen in
rooms C<out>, C<venue> and C<sidetrack>.

Rooms C<out> and C<venue> are special in the sense that events occuring
there prevent talks from happening and actually "cut" any overlapping
talk in two. One part before the event (usually a coffee break) and
the remaining time after.

Only hour-long tutorials should be cut by events.

Room C<sidetrack> is also special. Like C<out> and C<venue>, these are
events happening outside of the standard rooms. They denotes events
happening elsewhere, and in parallel (for example, a trip as part of the
"partner program"). Obviously, it shouldn't be "cut" by anything happening
in the C<out> and C<venue> rooms.

There may be some cases for which Act does not display the schedule
properly (this should not happen once your schedule is finished, since
you shouldn't have any overlapping talks). Please let us know when
this happens.

Events are:

=over 4

=item *

the coffee breaks, lunch

=item *

anything happening outside the conference rooms (pub crawls, etc.)

=item *

special talks without a defined speaker.

=back

=head2 Lightning talks sessions

Lightning talks sessions are fully handled by Act. One
can submit a lightning talk, which will be accepted or not, as for the
other talks. Lightning talks do not have an individual date, time and
duration: you'll have to create one or several "lightning talks"
events (or talks if you want the name of the master of ceremony to
appear in the schedule) in which you'll paste the list of lightning talks.

It's rather easy to link talks from within an event or talk.
Simply note the talk id and use it to create a link to the user and talk
in the event or talk description.

As an exemple, here is the source description of the lightning talks
session of the French Perl Workshop 2005:

    Programme des présentations éclairs :
    - talk:101
    - talk:63
    - talk:201
    - talk:198
    - talk:190
    - Alexandre Buisse - Le GC de Parrot
    - Pierre Weis - Présentation d'OCaml
    - Stéphane Payrard - GreaseMonkey

(The last three talks were last minutes talks that were not registered
in the database.)

And here is the result:
L<http://conferences.yapceurope.org/fpw2005/event/43>.

=head1 Using calendar software

People with the C<orga> bit set can work with Act talks, both pending and accepted,
scheduled and unscheduled, using calendar software such as iCal or Google Calendar.

=over 4

=item *

Use "iCal export" to export talks to an .ics file.

=item *

Import the .ics file into your calendar software.
Unscheduled talks will be set to a default date.

=item *

Compose the schedule by move talks around in the calendar software.

=item *

Export the calendar to an .ics file.

=item *

Upload the .ics file to Act using the "iCal import" feature.
Act then updates existing talks' start date and time with new values from the uploaded file.

=back

=cut
